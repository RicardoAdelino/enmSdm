Hi David,

Could you post some reproducible code (i.e., that shows the error/difficulty)?

The predictEnmSdm() function in the enmSdm package may be a bit easier to use. enmSdm is a dependency of enmSdmPredImport, so you should already have enmSdm on your system. The predictModel() function in the enmSdmPredImport package is more specific to the analyses I used in the manuscript, although it should still work.  If you're predicting to a data frame (assuming the maxent.jar file is where it should be):

# for a data frame:
predictions <- predictEnmSdm(model, dataFrame, maxentFun='dismo', ...)

The "maxentFun" part specifies whether to use the "default" predict function in the dismo package for the Maxent model or another function. For versions 3.3.3k and earlier, there is a known bug in the predict function in that if you say *not* to use clamping, it still does clamping when predicting outside the range of the training data. Thus, I wrote another function (in the enmSdm package) called predictMaxEnt() which does allow you to turn clamping on/off (default is on):

predictions <- predictMaxEnt(model, dataFrame, ...).

The cool thing about this function is it lets you use the permute-after-calibration test on specific feature types. For example, you can test how important an interaction between bio1 and b12 is by scrambling cases where they appear in an interaction term, while holding the values of bio1 and bio12 as observed in other features. (Please let me know if the documentation isn't clear.)

Finally, to predict to a raster/stack/brick:

# for a raster/raster stack/brick:
predictions <- raster::predict(rasters, model, fun=predictMaxEnt, ...)

This uses the raster packages's predict function as a wrapper for the predictMaxEnt function.

I hope that helps,
Adam

PS The manuscript is back with the reviewers. Like I said, the content/conclusions aren't changed in response to their comments, but the tone is more dismal (i.e., "measuring variable importance accurately is challenging").



On Thursday, March 12, 2020 at 10:48:53 PM UTC-5, David Bennett wrote:

    Hi Adam,

    I've been working on this project around other things since we chatted, and have managed to evaluate model performance using CBI (thanks so much for your advice).

    But I'm still struggling with the variable importance side of things - specifically, because my model is produced using maxent java, getting it to work with the enmSdmPredImport code. Do you have any advice?

    It is not essential for the completion of this project, since I am focusing on relative rather than absolute variable importance (but it would be very nice to have, and especially useful in future projects). Know you are very busy, and am extremely grateful for your help up to now.

    Many thanks,

    David.



    On Fri, Dec 20, 2019 at 3:05 AM Adam Smith <ad...@earthskysea.org> wrote:

        Hi David,

        Wow--I'm glad to hear that paper helped!

        I think the easiest way to export predictions to test sites is to write a prediction raster in the GUI then import it into R using:

        library(raster)
        predRast <- raster("C:/path/rasterName.asc")

        Then extract the predictions at the test sites:

        testPresPreds <- raster::extract(predRast, sites)

        where "sites" is a two-column matrix with longitude and latitude (in that order).

        You can also extract predictions from random background sites as:

        library(dismo)
        testBgSites <- randomPoints(predRast, 10000)
        testBgPreds <- extract(predRast, testBgSites)

        (Sorry if you already knew this stuff.)

        From predictions are test presence and background sites you can then calculate CBI.  The exospat package has a function to calculate CBI, but the last I checked (about 1.5 yr ago), there was a very slight bug that probably won't affect most cases but just might (and if it does, it would usually just make CBI be different from the value it should be by 0.01 or 0.02, at most).  Alternatively, my enmSdm package has a function contBoyce() that does it, too.  You can get it using the directions about half-way down this page: https://github.com/adamlilith/enmSdm.

        Please do note, though, that you can use target background sites in dismo:

        mxModel <- maxent(data, presBg)

        where "data" is a data frame with rows representing training sites or background sites and columns representing predictors. presBg is a vector with 1s (denoting presence)  and 0s (denoting background) with the same number of values as "data".  Generically, the background sites in "data" are chosen randomly, but in your case they would represent the locations of your target sites (or any other non-random sites being used to correct for bias).  You can then use predict() to generate predictions at your test sites.

        Good luck,
        Adam






        On Thursday, December 19, 2019 at 11:19:21 AM UTC-6, David Bennett wrote:

            Hi Adam,

            As it happens, it was your paper which inspired me to use CBI haha, it became one of my main citations. My main difficulty has been getting my Maxent Java model imported into R.

            Normally I would have just used R to build a Maxent model, using either Dismo or SDM packages. But my data spans most of continental Europe, and has suffered from geographic bias due to different rates of sampling in each country and region - I've unbiased using a target-group sampling bias file which is bugged in Dismo.

            You mentioned I could export the results to R or Excel and calculate CBI from there. Sorry to bother you, but how would I do this?

            Many thanks,

            David





            On Sunday, December 15, 2019 at 2:32:46 AM UTC, Adam Smith wrote:

                Hi David,

                It sounds like you're asking if you can tell the Maxent gui to use CBI rather than AUC to calculate variable importance. If that's right, then no, AUC is hard-coded into the GUI. You would have to export the results to R or Excel.

                In case you're interested, we have a paper on using CBI to infer variable importance using Maxent, GAMs, and BRTs. It's in revision now, but a preprint can be found here (https://www.biorxiv.org/content/10.1101/715904v1). The revisions don't involve changing any of the results at all (ie, every result in the preprint will be the same as in the final article).

                Best,
                Adam

        -- 
        You received this message because you are subscribed to the Google Groups "Maxent" group.
        To unsubscribe from this group and stop receiving emails from it, send an email to max...@googlegroups.com.
        To view this discussion on the web visit https://groups.google.com/d/msgid/maxent/0b539e27-13e3-4903-81e2-3a2157b72b24%40googlegroups.com. 

